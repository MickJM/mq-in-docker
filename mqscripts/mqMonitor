#!/bin/bash
#
# Monitor IBM MQ Queue Managers in Docker containers
#
set +e
#
echo "Monitor: MQ Monitor"
echo "Monitor: Version 1.0.0.2"
echo $(date)
echo "---------------------------"
echo "Monitor: MQMonitor is running as:  "
id
#
# Function to stop MQ cleanly
#
stop()
{
	echo "Monitor: Stopping"
	endmqm ${IBM_MQ_QUEUEMANAGER}
}	

#
# Function to stop MQ immediatly
#
immediateStop()
{
	echo "Monitor: Stopping immediate"
	endmqm -i ${IBM_MQ_QUEUEMANAGER}
}	

#
# Remove Lock file
#
removeLock() {
	echo "Monitor: Removing Lock file"
	rm /var/mqm/${IBM_MQ_QUEUEMANAGER}.lock
}

#
# Return the state of the queue manager
#
state()
{
	dspmq -n -m ${IBM_MQ_QUEUEMANAGER} | awk -F '[()]' '{print $4}'	
}

#
# Create or start the queue manager
#
createQueueManager()
{
	echo "Monitor: Creating queue manager"
	. /opt/mqm/bin/setmqenv -s
	echo "----------------------------------------"
#
	dspmq | grep ${IBM_MQ_QUEUEMANAGER}
	qmgrExists=`dspmq | grep ${IBM_MQ_QUEUEMANAGER} > /dev/null ; echo $?`
	echo "Monitor: Queue Manager ${IBM_MQ_QUEUEMANAGER} exists = ${qmgrExists}"
#
	if [ ! -d /var/mqm/ ]; then
	    mqFileSystem="N"
	else
	    mqFileSystem="Y"
	fi
	echo "Monitor: MQFileSystem is : ${mqFileSystem}"
#
	if [ ${mqFileSystem} == "Y" ] && [ ${qmgrExists} -ne 0 ]; then
	    coldRestart="Y"
	else
	    coldRestart="N"
	fi
	coldRestart="N"
	echo "Monitor: coldRestart is : ${coldRestart}"
#
# If we have NOT selected 'COLD RESTART',  then create 
#    a new queue manager if it doesn't exist
#
##	if [ ${coldRestart} == "N" ]; then
	if [ ${qmgrExists} -ne 0 ]; then
		echo "Monitor: Info: Creating queue manager ${IBM_MQ_QUEUEMANAGER}"
		echo "Monitor: Current disk space / mount points"
		df -h
#
		echo "Monitor: Creating queue manager ..."
		crtmqm -u DEAD.LETTER.QUEUE -lc -lp ${IBM_MQ_PRIMARYLOGFILES} -ls ${IBM_MQ_SECONDARYLOGFILES} ${IBM_MQ_QUEUEMANAGER}
#
		RC=$?
		echo "RC=${RC}"
		if [ ${RC} != 0 ]; then
			echo "Monitor: Unable to create queue manager ${IBM_MQ_QUEUEMANAGER} "
			exit
		else
			echo "Monitor: Queue manager ${IBM_MQ_QUEUEMANAGER} create susscessfully, RET=${RC}"
		fi
#
		webadmin
#
		configPreRunningQueueManager
#
# Save a copy of the mqs.ini file, so we can reuse it in a cold restart
#
		cp /var/mqm/mqs.ini /var/mqm/qmgrs/${IBM_MQ_QUEUEMANAGER}/copy_mqs.in
#
		echo "Monitor: Starting queue manager"
		strmqm ${IBM_MQ_QUEUEMANAGER}
		RC=$?
		echo "Monitor: START RC=${RC}"
		if [ ${RC} != 0 ]; then
			echo "Monitor: Unable to start queue manager ${IBM_MQ_QUEUEMANAGER} "
			exit
		else
			echo "Monitor: Queue manager ${IBM_MQ_QUEUEMANAGER} started successfully, RET=${RC}"
		fi
		echo "Monitor: Sleeping for 5 seconds"			
		sleep 5
#
		configPostRunningQueueManager
#
	else
		echo "Monitor: Queue manager ${IBM_MQ_QUEUEMANAGER} already exists, attempting to restart"
#
		echo "Monitor: Starting queue manager"
		strmqm ${IBM_MQ_QUEUEMANAGER}
		RC=$?
		echo "Monitor: START RC=${RC}"
		if [ ${RC} != 0 ]; then
			echo "Monitor: Unable to start queue manager ${IBM_MQ_QUEUEMANAGER} "
			exit
		else
			echo "Monitor: Queue manager ${IBM_MQ_QUEUEMANAGER} started successfully, RET=${RC}"
		fi
#
	fi
##	else
#
# https://webspheremqadministrator.blogspot.com/2014/06/how-to-do-cold-restart-of-queue-manager.html
#
# Cold restart
#
##		echo "Monitor: Cold ReStart"
##		echo "Monitor: Removing old log files for ... ${IBM_MQ_QUEUEMANAGER} in /var/mqm/logs"
##		cd /var/mqm/log/${IBM_MQ_QUEUEMANAGER}/
##		rm -r *
##		ls -lrt 
#
# First create a new 'dummy' queue manager, based on the details in the environment variables
#    We dont start the queue manager yet, once created, copy the new log files to the queue manager folder
#    Copy the same mqs.ini from the original creation of the queue manager
#    Delete the 'dummy' queue manager
#    Start the queue manager
#        Messages stored persistently will be recovered
#        Messages stored on log files will be lost
#    if every thing works, the queue manager should start sucessfully
#
##		echo "Monitor: Creating dummy queue manager ... COLD${IBM_MQ_QUEUEMANAGER}"
##		crtmqm -u DEAD.LETTER.QUEUE -lc -lp ${IBM_MQ_PRIMARYLOGFILES} -ls ${IBM_MQ_SECONDARYLOGFILES} COLD${IBM_MQ_QUEUEMANAGER}
##		RC=$?
##		if [ ${RC} != 5 ]; then
##			echo "Monitor: COLD queue manager ${IBM_MQ_QUEUEMANAGER} created successfully"
##		else
##			echo "Monitor: COLD queue manager ${IBM_MQ_QUEUEMANAGER} failed to be created, error code $?"
##			exit
##		fi
#
##		echo "***********************************"
##		echo "Monitor: Copying new config file from COLD${IBM_MQ_QUEUEMANAGER} to ${IBM_MQ_QUEUEMANAGER}"
##		mv /var/mqm/log/COLD${IBM_MQ_QUEUEMANAGER}/* /var/mqm/log/${IBM_MQ_QUEUEMANAGER} 
##		ls -lrt /var/mqm/log/${IBM_MQ_QUEUEMANAGER}
##		echo "Monitor: Copying mqs.ini"
##		cp /var/mqm/qmgrs/${IBM_MQ_QUEUEMANAGER}/copy_mqs.ini /var/mqm/mqs.ini
##		echo "***********************************"
#
# Remove the 'dummy' queue manager
#
##		dltmqm COLD${IBM_MQ_QUEUEMANAGER}
#
##		echo "Monitor: Starting queue manager ${IBM_MQ_QUEUEMANAGER} after cold-restart"
##		strmqm ${IBM_MQ_QUEUEMANAGER}
##		RC=$?
##		echo "Monitor: START RC=${RC}"
##		if [ ${RC} != 0 ]; then
##			echo "Monitor: Unable to start queue manager ${IBM_MQ_QUEUEMANAGER} "
##			exit
##		else
##			echo "Monitor: Queue manager ${IBM_MQ_QUEUEMANAGER} started successfully, RET=${RC}"
##		fi

##	fi
#
	set +e
#	echo "Monitor: Starting queue manager ${IBM_MQ_QUEUEMANAGER}"
#	strmqm ${IBM_MQ_QUEUEMANAGER}
#	echo "Monitor: Queue manager ..."
#	RC=$?
#	if [ ${RC} != 5 ]; then
#		echo "Monitor: Queue manager is starting ${RC}"
#	else
#		echo "Monitor: Queue manager returned error code ${RC}"
#	fi
#
    echo "Monitor: Starting WebConsole"
	strmqweb
	dspmqweb
#
#	Check the running status of mq-metrics
#
    ps -ef | grep mq-metrics | grep -v grep
	monitorRunning=`ps -ef | grep mq-metrics | grep -v grep | wc -l`
	if [ ${monitorRunning} != 0 ]; then
		echo "Monitor: MQMONITOR service started successfully : ${RC}"
	else 
		echo "Monitor: MQMONITOR service did not start: ${RC}"
	fi
#
	set -e
}
#
# Pre Running Queue Manager config
#
configPreRunningQueueManager()
{
#
    echo "Monitor: Creating / extracting keystore and certificate"
	. ./mqCertificates
#
}
#
# Post Running Queue Manager config
# Apply .MQSC configuration files to the queue manager
#
configPostRunningQueueManager()
{
	echo "Monitor: Setup monitor service in .mqsc files"
	. ./mqSetupMonitorService ${IBM_MQ_QUEUEMANAGER}
#	
	echo "Monitor: Applying configuration to queue manager using .mqsc files"
	. ./mqSetupQueueManager ${IBM_MQ_QUEUEMANAGER}
#
}
#
#
webadmin() 
{
	echo "Monitor: Enabling MQWebBrowser"
	. ./mqWebAdmin
}
#
# Post configurations
# Run after the queue manager has been started
#
##postConfigurations() 
##{
#
##}
#
# Ensure that the queue manager is running
#
monitor()
{
	echo "Monitor: Monitoring"
	dspmq -m ${IBM_MQ_QUEUEMANAGER}
#	state
	STATE=`state`
	echo "State = ${STATE}"
	until [ "${STATE}" == "RUNNING" ] || [ "${STATE}" == "RUNNING ELSEWHERE" ]; do
		if [ "${STATE}" == "RUNNING ELSEWHERE" ]; then
			wasrunningelsewhere=TRUE
		fi
		sleep 1
		STATE=`state`
	done
#
	dspmq
	echo "Monitor: IBM MQ Queue Manager ${IBM_MQ_QUEUEMANAGER} is fully running"
    touch /var/mqm/${IBM_MQ_QUEUEMANAGER}.lock
#
	STATE=`state`
	while [ "${STATE}" == "RUNNING" ] || [ "${STATE}" == "RUNNING ELSEWHERE" ]; do
#			    echo "waiting ...."
		if [ "${STATE}" == "RUNNING ELSEWHERE" ]; then
			wasrunningelsewhere=true
		fi
		sleep 5
		STATE=`state`
	done
#
	echo "Ending ...."
	ATTEMPTS=0
#
	while true; do
		STATE=`state`
		echo "Monitor: Attempting to stop MQ cleanly ..."
		ATTEMPTS=$((ATTEMPTS+1))
		echo "Monitor: Attempts = ${ATTEMPTS}"
		if [ ${ATTEMPTS} -gt 6 ]; then
		   echo "Monitor: WARNING: Attempts breached, stopping MQ with 'immediate' attribute ..."
		   immediateStop
		   STATE=`state`
		fi
		case "${STATE}" in
			ENDED*)
				echo "Monitor: Queue Manager is ending ..."			
				break;;
			*) 
			    echo "Monitor: Queue Manager status ${STATE}..."
				;;
		esac
		sleep 5
	done

}
#
trap stop SIGTERM SIGINT
#if [ -z ${coldRestart} ]; then
#    echo "Monitor: MQ Creating queue manager"
#	coldRestart="N"
#else
#    echo "Monitor: MQ Cold ReStart property is set as ${coldRestart}"
#fi
#
#echo "Switching users"
#
createQueueManager
monitor
#
if [ "${wasrunningelsewhere}" == "true" ]; then
    echo "Monitor: Queue manager was running elsewhere, starting queue manager"
	wasrunningelsewhere=false
	strmqm -x ${IBM_MQ_QUEUEMANAGER}
	monitor
fi